<template>
	<div class="page" data-name="connect-four">

		<div class="navbar" sty>
			<div class="navbar-bg"></div>
			<div class="navbar-inner sliding" style="justify-content: space-between; gap: 16px;">
				<div class="flex row ">
					<div class="margin-horizontal-half">
						<a href="/" class="link${!$store.state.firstLoad ? ' back' : ''}">
							<i class="icon icon-back"></i>
							<span class="if-not-md">Back</span>
						</a>
					</div>
					<div class="title" style="align-self: center;">Connect Four Game!</div>
				</div>
				<div class="flex row gap">
					<span class="title" style="align-self: center;">
						Animate
					</span>
					<label class="item-content" style="border-radius: 1rem;">
						<div class="item-inner">
							<div class="item-after">
								<div class="toggle toggle-init color-blue">
									<input id="animateToggle" type="checkbox" />
									<span class="toggle-icon"></span>
								</div>
							</div>
						</div>
					</label>
					<div class="flex row delay-list">
						<span class="title" style="align-self: center;">
							Delay
						</span>
						<div class="list no-margin flex">
							<ul style="align-self: center;">
								<li>
									<div style="min-width: 150px; margin: 0 16px">
										<div class="range-slider range-slider-init color-blue" data-label="true">
											<input id="delaySlider" type="range" min="0" max="500" step="1"
												value="450" />
										</div>
									</div>
								</li>
							</ul>
						</div>
					</div>
					<!-- <label class="item-content" style="border-radius: 1rem;">
						<div class="item-inner">
							<div class="item-after">
								<div class="toggle toggle-init color-blue">
									<input id="delayToggle" type="checkbox" />
									<span class="toggle-icon"></span>
								</div>
							</div>
						</div>
					</label> -->
				</div>
				<div class="margin-right">
					<a href="#" class="button button-tonal" @click="${reset}">Reset</a>
				</div>
			</div>
		</div>

		<div class="page-content">

			<div class="winner" @click="${reset}">
				<div class="text">
					${winner} won!
				</div>
			</div>
			<div class="flex row" style="align-items: center; justify-content: center; height: 100%; height: 100%;">
				<table id="gameTable">
				</table>
			</div>
		</div>

	</div>
</template>
<style>
	.winner {
		width: 100%;
		height: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
		opacity: 0;

		font-size: 56px;
		position: absolute;
		transition: 800ms;
		backdrop-filter: blur(3px);
		z-index: 10000;
		pointer-events: none;
	}

	#gameTable {

		width: 100%;
		height: 100%;
		border-collapse: collapse;
		table-layout: fixed;
		overflow: hidden;
	}

	th,
	td {
		border: 1px solid;
	}

	.team-red,
	.red {
		--color: rgb(255, 48, 48);
	}

	.team-blue,
	.blue {
		--color: rgb(27, 61, 255);
	}

	.tile.filled .circle {
		display: none;
		content: '';
		width: 90%;
		height: 90%;
		border-radius: 50%;
		position: absolute;
		top: 5%;
		left: 5%;
		background: var(--color);

		pointer-events: none;
	}

	.tile.filled {
		position: relative;
	}

	.circle.animate {
		animation-timing-function: cubic-bezier(0.33333, 0.66667, 0.66667, 1);
		animation: slide-in 650ms linear forwards;
		/* transition: 1200ms; */
	}

	@keyframes slide-in {
		0% {
			transform: translateY(calc(var(--top) + 50px)) scale(0.5);
			animation-timing-function: cubic-bezier(0.2, .6, 0.75, 1);
		}

		36% {
			transform: translateY(var(--top)) scale(1);
			animation-timing-function: cubic-bezier(0.33333, 0, 0.68, 0.33333);
		}

		100% {}

	}
</style>
<script>

	export default (props, { $, $on, $f7, $store, $update }) => {

		let turn = 'blue';
		let winner = '';
		let dim = {
			width: 8,
			height: 7
		}
		let xs = [0, 1, 1, 1];
		let ys = [1, -1, 0, 1];
		let animate = true;
		let delay = 450;

		$on('pageInit', (e) => {

			createGameTable(dim.width, dim.height);
			window.addEventListener('resize', resizeGrid);
			resizeGrid();

			$('#animateToggle').prop('checked', animate);
			$('#animateToggle').on('change', () => {
				animate = $('#animateToggle').prop('checked');
				if (animate)
					$('.delay-list').show();
				else
					$('.delay-list').hide();

			});

			$('#delaySlider').prop('checked', delay);
			$('#delaySlider').on('change', () => {
				delay = $('#delaySlider').val();
			});
		});

		function round(num, decimals) {
			return Math.round((num + Number.EPSILON) * Math.pow(10, decimals)) / Math.pow(10, decimals);
		}

		function resizeGrid() {
			let table = $('#gameTable');
			let parent = table.parent();
			let w = parent.width();
			let h = parent.height();
			let r = dim.width / dim.height;
			if (w / r >= h) { // wider than ration (side black bars)
				table.css('height', `${h}px`);
				table.css('width', `${h * r}px`);
			} else { //  if (tW / r >= h)
				table.css('height', `${w / r}px`);
				table.css('width', `${w}px`)
			}
		}

		function reset() {
			$('.tile.filled').removeClass('filled').removeClass('blue').removeClass('red');
			$('.circle.animate').removeClass('animate');
			$('.winner').css('opacity', '0');
			$('.winner').css('pointer-events', 'none');
			turn = 'blue';
			winner = '';
		}

		function win() {
			winner = turn[0].toUpperCase() + turn.substring(1);
			$('.winner').css('opacity', '1');
			$('.winner').css('pointer-events', 'all');
			turn = 'over';
			$update();
		}

		function createGameTable(width, height) {
			$('#gameTable').html(`
				<tbody>
					${Array.from({ length: height }, (y, i) => `
					<tr>
						${Array.from({ length: width }, (x, j) => `
						<td class="tile" data-x="${j}" data-y="${i}">
							<!-- Cell ${j}, ${i} -->
							<div class="circle"></div>
						</td>
						`).join('')}
					</tr>
					`).join('')}
				</tbody>
			`);
			$("#gameTable tbody").on("click", (event) => {
				let $td = $(event.target);
				let col = $td.data('x');
				let rows = $(`.tile:not(.filled)[data-x="${col}"]`)

				if (rows.length > 0 && ['blue', 'red'].includes(turn)) {

					let top = rows.eq(0);
					let topCoords = top.offset();
					let bottom = rows.eq(rows.length - 1);
					let bottomCoords = bottom.offset();
					bottom.addClass('filled').addClass(turn);
					let curX = parseInt(bottom.data('x'));
					let curY = parseInt(bottom.data('y'));
					let isWin = checkWin(curX, curY)

					let circle = bottom.children('.circle');
					if (animate) {
						turn = `animate-${turn}`
						bottom.parent()[0].style.setProperty('--top', `-${bottomCoords.top - topCoords.top}px`);
						circle.show();
						circle.addClass('animate');

						setTimeout(() => {
							turn = turn.replace('animate-', '');
							tryNextTurn(isWin)
						}, delay);
					} else {
						circle.show();
						tryNextTurn(isWin)
					}
				}
			});
		}

		function tryNextTurn(isWin) {
			if (isWin)
				win();
			else
				turn = (turn == 'blue' ? 'red' : 'blue');
		}

		function checkWin(startX, startY) {
			for (let i = 0; i < 4; i++) {
				let x = xs[i];
				let y = ys[i];
				let connectLength = 1 + connectLengthInDir(startX, startY, x, y, 0) + connectLengthInDir(startX, startY, -x, -y, 0);

				if (connectLength >= 4)
					return true;
			}
			return false;
		}

		function connectLengthInDir(curX, curY, dirX, dirY, length) {
			// console.log('numColorsInDir', curX, curY, dirX, dirY, length);
			let testX = curX + dirX;
			let testY = curY + dirY;
			if (between(testX, 0, dim.width - 1, true) && between(testY, 0, dim.height - 1, true)) {
				let testTile = $(`.tile[data-x="${testX}"][data-y="${testY}"]`)
				// console.log('test tile', testX, testY, testTile.hasClass(turn));
				if (testTile.hasClass(turn))
					return connectLengthInDir(testX, testY, dirX, dirY, length + 1)
			}
			return length;
		}

		function between(num, min, max, inc) {
			return (inc && (num >= min && num <= max)) | (!inc && (num > min && num < max));
		}

		return $render;
	}
</script>