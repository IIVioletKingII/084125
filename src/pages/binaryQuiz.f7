<template>
	<div class="page" data-name="binary-quiz">

		<div class="navbar" sty>
			<div class="navbar-bg"></div>
			<div class="navbar-inner sliding" style="justify-content: space-between; gap: 16px;">
				<div class="flex row">
					<div class="margin-horizontal-half">
						<a href="/" class="link${!$store.state.firstLoad ? ' back' : ''}">
							<i class="icon icon-back"></i>
							<span class="if-not-md">Back</span>
						</a>
					</div>
					<div class="title" style="align-self: center;">Binary Quiz!</div>
				</div>
			</div>
		</div>

		<div class="page-content" style="--f7-block-title-font-size: 18px;">

			<div class="block-title">
				Settings
			</div>
			<div class="block flex row gap align-items-center" style="--gap: 8px;">
				<span class="title" style="align-self: center;">
					Signal Bit
				</span>
				<label class="item-content">
					<div class="item-inner">
						<div class="item-after">
							<div class="toggle toggle-init color-blue">
								<input id="signalToggle" type="checkbox" />
								<span class="toggle-icon" style="scale: 0.8"></span>
							</div>
						</div>
					</div>
				</label>
				<span></span>
				<span class="title" style="align-self: center;">
					Hints
				</span>
				<label class="item-content">
					<div class="item-inner">
						<div class="item-after">
							<div class="toggle toggle-init color-blue">
								<input id="hintToggle" type="checkbox" />
								<span class="toggle-icon" style="scale: 0.8"></span>
							</div>
						</div>
					</div>
				</label>
				<span></span>
				<span class="title" style="align-self: center;">
					Number of bits
				</span>
				<div class="list no-margin flex">
					<ul style="align-self: center;">
						<li>
							<div style="min-width: 150px; margin: 0 16px">
								<div class="range-slider range-slider-init color-blue" data-label="true">
									<input id="delayToggle" type="range" min="1" max="16" step="1" value="4" />
								</div>
							</div>
						</li>
					</ul>
				</div><span></span>
				<span class="title" style="align-self: center;">
					Difficulty
				</span>
				<div class="list no-margin flex">
					<ul style="align-self: center;">
						<li>
							<div style="min-width: 100px; margin: 0 16px">
								<div class="range-slider range-slider-init color-blue" data-label="true">
									<input id="difficultyToggle" type="range" min="0" max="1" step="0.01" value="0.5" />
								</div>
							</div>
						</li>
					</ul>
				</div>
			</div>

			<div class="block-title flex row gap align-items-center">
				Try it!
				<a href="#" class="link"><i class="icon material-icons expand-more"
						@click="${resetBitEntry}">refresh</i></a>
				<a class="button button-tonal" @click="${revealAnswer}">Reveal</a>
			</div>
			<div class="block flex row gap align-items-center" style="--gap: 4px;">
				<div class="resetBitEntry flex row gap"></div>
				<span class="text-align-center"> = </span>
				<div class="answer list no-margin">
					<ul>
						<li class="item-content item-input no-margin no-padding-vertical"
							style="--f7-input-item-border-radius: 8px; --f7-input-border-color: #00000000">
							<div class="item-inner">
								<!-- <div class="item-title item-label">
										(Width <i class="f7-icons font-size-10" style="margin: 0 0px;">xmark</i> Height)
									</div> -->
								<div class="item-input-wrap flex row" style="align-items: center;">
									<input type="number" class="number-input" style="width: 64px; margin-right: 32px;"
										id="answerInput" min="0" value="0" onblur="${onChangeAnswer}"
										onkeypress="${onChangeAnswer}" />
									<span class="input-clear-button" style="scale: 0.8;"></span>
								</div>
							</div>
						</li>
					</ul>
				</div>
				<span></span>
				<div class="result text-color-red">
					Incorrect
				</div>
			</div>

		</div>

	</div>
</template>
<style>
	.bit {
		padding: 0.5rem;
		background: rgb(70, 70, 70);
		background-color: var(--f7-navbar-bg-color, var(--f7-bars-bg-color));
		border-radius: 0.5rem;
		display: flex;
		flex-direction: column;
		align-items: center;
	}

	.bit[data-index="signal"] {
		color: var(--f7-theme-color);
	}

	.hint {
		/* display: none; */
		font-size: 12px;
	}

	.bit input {
		text-align: center;
		min-width: 0;
		width: auto !important;
		max-width: 40px;
	}

	.block-title {
		line-height: 20px;
		color: var(--f7-theme-color-tint);
	}

	.item-content.item-input:after {
		content: none !important;
	}
</style>
<script>

	export default (props, { $, $on, $f7, $store, $update }) => {

		$on('pageInit', (e) => {
			resetBitEntry();
			$('#signalToggle').on('change', (e) => {
				resetBitEntry();
			});
			$('#delayToggle').on('change', (e) => {
				resetBitEntry();
			});
			$('#difficultyToggle').on('change', (e) => {
				resetBitEntry();
			});
			$('#hintToggle').on('change', (e) => {
				$('.hint').css('display', $('#hintToggle').prop('checked') ? '' : 'none');
			});
		});

		function revearlCorrectness() {
			let correct = $('#answerInput').val() == getBitAnswer();
			let result = $('.result');
			if (correct) {
				result.removeClass('text-color-red').addClass('text-color-green');
				result.html('Correct!');
			} else {
				result.addClass('text-color-red').removeClass('text-color-green');
				result.html('Incorrect');
			}
		}

		function revealAnswer(e) {
			$('#answerInput').val(getBitAnswer());
			revearlCorrectness();
		}

		function onChangeAnswer(e) {
			console.log('answer', e);
			if ((e.type == 'keypress' && e.key == 'Enter') | e.type == 'blur') {
				// console.log('answer', e.target,);
				// let input = $(e.target);
				// if (input)
				revearlCorrectness();
			}

		}

		function getBitAnswer() {
			let bits = $('.bit:not([data-index="signal"])');
			let signalBit = $('.bit[data-index="signal"]');
			return bits.reduce((sum, n, i) => {
				let cur = bits.eq(i);
				let index = parseInt(cur.data('index'));
				// console.log('test', n, i, index, cur.data('index'));
				if (parseInt(cur.html()) != 0)
					return sum + Math.pow(2, index);
				return sum;
			}, 0) * (signalBit.length > 0 && parseInt(signalBit.html()) == 1 ? -1 : 1);
		}

		function resetBitEntry() {
			let difficulty = $('#difficultyToggle').val();
			let randomBit = () => Math.random() < difficulty ? 1 : 0;
			function createBit(index) {
				return `
					<div class="bit" data-index="${index}">
						${randomBit()}
						<div class="hint" style="${$('#hintToggle').prop('checked') ? '' : 'display: none;'}">${index == 'signal' ? '-' : Math.pow(2, index)}</div>
					</div>
				`;
			}
			let length = $('#delayToggle').val() - 1;
			$('.resetBitEntry').html(`
				${$('#signalToggle').prop('checked') ? `
					${createBit('signal')}
				` : ''}
				${Array.from({ length: length + 1 }, (arr, i, j) => `
					${createBit(length - i)}
				`).join('')}
			`);
			revearlCorrectness();
			// $update();
			// $('.answer').html(getBitAnswer());
		}

		return $render;
	}
</script>